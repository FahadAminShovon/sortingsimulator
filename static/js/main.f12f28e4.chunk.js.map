{"version":3,"sources":["components/algorithms/selectionSort.js","components/visualizer/index.js","components/visualizer/Visualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["selectionSortAnimations","arr","animations","i","length","minIndex","oldMinIndex","j","obj","start","iter","push","startVal","minVal","console","log","swap","Visualizer","useState","setArr","buttonDisable","setButtonDisable","resetArray","minn","maxx","Math","floor","random","elements","document","getElementsByClassName","style","backgroundColor","selectionSort","a","counter","incr","startIndex","setTimeout","height","useEffect","className","disabled","onClick","role","aria-label","type","map","value","idx","key","color","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f12f28e4.chunk.js","sourcesContent":["export const selectionSortAnimations = (arr) => {\n    const animations = []\n    const swap = []\n    for (let i = 0; i < arr.length - 1; i++){\n        let minIndex = i;\n        let oldMinIndex = i;\n        for(let j = i+1; j < arr.length; j++){\n            if(arr[j] <= arr[minIndex]){\n                oldMinIndex = minIndex;\n                minIndex = j;\n            }\n            const obj = {\n                start: i,\n                minIndex,\n                oldMinIndex,\n                iter: j,\n            }\n            animations.push(obj)\n        }\n        const obj = {\n            start:i,\n            minIndex: minIndex,\n            startVal: arr[i],\n            minVal: arr[minIndex],\n        }\n        arr[i] = arr[minIndex];\n        arr[minIndex] = obj.startVal;\n        animations.push(obj)\n        console.log(animations.length);\n    }\n\n    return {animations,swap};\n}","import Visualizer from \"./Visualizer\";\n\nexport default Visualizer","import React, { useState, useEffect } from 'react';\nimport './Visualizer.css'\nimport { selectionSortAnimations } from '../algorithms/selectionSort';\n\nconst ANIMATION_SPEED_MS = 10;\nconst NUM_OF_BARS = 50;\n\n\nconst Visualizer = () => {\n    const [arr, setArr] = useState([]);\n    const [buttonDisable, setButtonDisable] = useState(false);\n    \n    const randomNumberGenerator = (minn, maxx) => {\n        return Math.floor(Math.random() * (maxx - minn) + minn);\n    }\n    const resetArray = () => {\n        const arr = [];\n        for(let i = 0; i < NUM_OF_BARS; i++){\n            arr.push(randomNumberGenerator(5, 800))\n        }\n        setArr(arr);\n\n        const elements = document.getElementsByClassName(\"array-item\");\n        for(let i = 0; i < elements.length ; i++){\n            elements[i].style.backgroundColor = 'rgb(15, 117, 117)'\n        }\n\n    }\n\n    const selectionSort = async () => {\n        await setButtonDisable(true)\n\n        const elements = document.getElementsByClassName(\"array-item\");\n        const {animations} = selectionSortAnimations(arr)\n\n        let counter = arr.length - 1;\n        let incr = counter ;\n\n        for(let i = 0; i < animations.length ; i++){\n\n            if(i === counter){\n                const {start: startIndex, minIndex, startVal, minVal} = animations[i];\n                setTimeout(() => {\n                    elements[startIndex].style.height = `${minVal}px`\n                    elements[startIndex].style.backgroundColor = `green`\n                    elements[minIndex].style.height = `${startVal}px`\n                    if(minIndex !== startIndex )elements[minIndex].style.backgroundColor = \"rgb(15, 117, 117)\"\n                    if(startIndex === arr.length-2 ){\n                        elements[arr.length -1].style.backgroundColor = \"green\"\n                        setButtonDisable(false)\n                    }\n\n                }, i* ANIMATION_SPEED_MS)\n                counter+= incr;\n                incr-=1\n            }\n            else {\n                const {start, minIndex,iter, oldMinIndex} = animations[i];\n                setTimeout(()=>{\n                    if(start === iter-1)elements[arr.length-1].style.backgroundColor = \"rgb(15, 117, 117)\";\n                    elements[start].style.backgroundColor = \"black\";\n                    elements[iter].style.backgroundColor = \"red\";\n                    if(iter!==0)elements[iter - 1].style.backgroundColor = \"rgb(15, 117, 117)\";\n                    if(oldMinIndex!==start)elements[oldMinIndex].style.backgroundColor = \"rgb(15, 117, 117)\";\n                    elements[minIndex].style.backgroundColor = \"blue\";\n\n                }, i * ANIMATION_SPEED_MS)\n            }\n\n        }\n    }\n    \n    useEffect(() => {\n        resetArray();\n    },[])\n\n    return ( \n        <div className=\"container-fluid\">\n        <div className=\"d-flex m-5\">\n            <button disabled = {buttonDisable} className=\"btn btn-primary \" onClick={resetArray}>Reset</button>\n            <div className=\"mr-auto\"></div>\n            <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n                <button disabled = {buttonDisable} type=\"button\" onClick = {selectionSort} className=\"btn btn-primary\">Selection Sort</button>\n            </div>\n        </div>\n\n\n            <div className=\"d-flex justify-content-center align-items-end flex-wrap array-container\">\n                {arr.map((value, idx) => \n                <div key={idx} className=\"array-item\" style={{height: `${value}px`, color:`rgb(15, 117, 117)`}}></div>)}\n            </div>\n        </div>\n    );\n}\n\nexport default Visualizer;","import React from 'react';\nimport './App.css';\nimport Visualizer from './components/visualizer';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Visualizer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}